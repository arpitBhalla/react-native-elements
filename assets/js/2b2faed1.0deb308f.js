"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5391],{54677:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var i=n(87462),r=n(63366),o=(n(67294),n(3905)),a=["components"],s={sidebar_label:"With Typescript",title:"Typescript",sidebar_position:6},p=void 0,c={unversionedId:"customization/typescript",id:"version-4.0.0-rc.2/customization/typescript",title:"Typescript",description:"TypeScript Definitions (extending the default theme)",source:"@site/versioned_docs/version-4.0.0-rc.2/customization/typescript.mdx",sourceDirName:"customization",slug:"/customization/typescript",permalink:"/docs/customization/typescript",draft:!1,editUrl:"https://github.com/react-native-elements/react-native-elements/edit/next/website/versioned_docs/version-4.0.0-rc.2/customization/typescript.mdx",tags:[],version:"4.0.0-rc.2",sidebarPosition:6,frontMatter:{sidebar_label:"With Typescript",title:"Typescript",sidebar_position:6},sidebar:"docs",previous:{title:"Common Pitfalls",permalink:"/docs/customization/pitfall"},next:{title:"AirbnbRating",permalink:"/docs/components/airbnbrating"}},l={},d=[{value:"TypeScript Definitions (extending the default theme)",id:"typescript-definitions-extending-the-default-theme",level:3}],m={toc:d};function u(e){var t=e.components,n=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"typescript-definitions-extending-the-default-theme"},"TypeScript Definitions (extending the default theme)"),(0,o.kt)("p",null,"TypeScript definitions for your theme can be extended by using TypeScript's ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/declaration-merging.html"},"declaration merging")," feature. First you need to create a declaration file called ",(0,o.kt)("inlineCode",{parentName:"p"},"react-native-elements.d.ts")," and then declare the module ",(0,o.kt)("inlineCode",{parentName:"p"},"@rneui/themed")," and 're-export' the types that you want to extend."),(0,o.kt)("p",null,"i.e. below we add a custom ",(0,o.kt)("inlineCode",{parentName:"p"},"p1Style")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," theme object and we add a bunch of colors to the ",(0,o.kt)("inlineCode",{parentName:"p"},"colors")," object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"export * from '@rneui/themed';\n\ntype RecursivePartial<T> = { [P in keyof T]?: RecursivePartial<T[P]> };\n\ndeclare module '@rneui/themed' {\n  export interface TextProps {\n    bold: boolean;\n  }\n\n  export interface Colors {\n    background: string;\n    border: string;\n    text: string;\n    altText: string;\n    danger: string;\n  }\n\n  export interface FullTheme {\n    colors: RecursivePartial<Colors>;\n    Text: Partial<TextProps>;\n  }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const myTheme = createTheme({\n  Text: (props) => ({\n    style: {\n      fontWeight: props.bold ? 'bold' : 'normal',\n    },\n  }),\n});\n")))}u.isMDXComponent=!0}}]);