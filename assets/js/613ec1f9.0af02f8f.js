"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3583],{78363:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var a=t(87462),o=t(63366),r=(t(67294),t(3905)),i=["components"],l={id:"migration_guide",title:"Migration Guide"},p="Migrating to v4",s={unversionedId:"migration_guide",id:"migration_guide",title:"Migration Guide",description:"React Native Elements v4 introduces many features including few new components, fully typescript support and some breaking changes whose migration is being given below.",source:"@site/docs/migration-guide.md",sourceDirName:".",slug:"/migration_guide",permalink:"/docs/next/migration_guide",draft:!1,editUrl:"https://github.com/react-native-elements/react-native-elements/edit/next/website/docs/migration-guide.md",tags:[],version:"current",frontMatter:{id:"migration_guide",title:"Migration Guide"},sidebar:"docs",previous:{title:"Label Guide",permalink:"/docs/next/labels"}},m={},d=[{value:"Core changes",id:"core-changes",level:2},{value:"Colors",id:"colors",level:3},{value:"Pressable",id:"pressable",level:3},{value:"Components",id:"components",level:2},{value:"<code>ThemeProvider</code>",id:"themeprovider",level:3},{value:"<code>Tooltip</code>",id:"tooltip",level:3}],u={toc:d};function c(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"migrating-to-v4"},"Migrating to v4"),(0,r.kt)("p",null,"React Native Elements v4 introduces many features including few new components, fully typescript support and some breaking changes whose migration is being given below."),(0,r.kt)("h2",{id:"core-changes"},"Core changes"),(0,r.kt)("p",null,"To use the v4 version, you first need to update the package names:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"- import {} from 'react-native-elements'\n+ import {} from '@rneui/themed'\n")),(0,r.kt)("p",null,"You can install the packages from npm or yarn"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @rneui/base @rneui/themed\n\n# or with yarn\nyarn add @rneui/base @rneui/themed\n")),(0,r.kt)("p",null,"You can also make ",(0,r.kt)("inlineCode",{parentName:"p"},"alias")," for package to help you with migration."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add react-native-elements@npm:@rneui/themed\n")),(0,r.kt)("h3",{id:"colors"},"Colors"),(0,r.kt)("p",null,"Added a new ",(0,r.kt)("inlineCode",{parentName:"p"},"background")," color to the ",(0,r.kt)("inlineCode",{parentName:"p"},"colors")," object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"const colors={\n  primary: '#2e7d32',\n  secondary: '#757575',\n+ background: '#ffffff',\n}\n")),(0,r.kt)("h3",{id:"pressable"},"Pressable"),(0,r.kt)("p",null,"These components are now using ",(0,r.kt)("inlineCode",{parentName:"p"},"Pressable")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"Touchable")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Avatar"),(0,r.kt)("li",{parentName:"ul"},"Badge"),(0,r.kt)("li",{parentName:"ul"},"ButtonGroup"),(0,r.kt)("li",{parentName:"ul"},"CheckBox"),(0,r.kt)("li",{parentName:"ul"},"Icon"),(0,r.kt)("li",{parentName:"ul"},"Image"),(0,r.kt)("li",{parentName:"ul"},"ListItem"),(0,r.kt)("li",{parentName:"ul"},"SearchBar"),(0,r.kt)("li",{parentName:"ul"},"SpeedDial"),(0,r.kt)("li",{parentName:"ul"},"Tile")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/pressable"},"Pressable")," is a Core Component wrapper that can detect various stages of press interactions on any of its defined children.")),(0,r.kt)("p",null,"This change would let you use ",(0,r.kt)("inlineCode",{parentName:"p"},"onPressIn")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"onPressOut")," APIs in components, For example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'  <CheckBox\n    title="I agree"\n    onPress={()=>{}}\n    onLongPress={()=>{}}\n+   onPressIn={()=>{}}\n+   onPressOut={()=>{}}\n    onPress={() => {}}\n  />\n')),(0,r.kt)("p",null,"and the rest of props for ",(0,r.kt)("inlineCode",{parentName:"p"},"Pressable")," can be added via ",(0,r.kt)("inlineCode",{parentName:"p"},"pressableProps")," API"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"  <ButtonGroup\n+   pressableProps={{android_ripple:{radius:2}}}\n  />\n")),(0,r.kt)("p",null,"few other props (like ",(0,r.kt)("inlineCode",{parentName:"p"},"underlayColor"),") will not be supported, you can remove them."),(0,r.kt)("h2",{id:"components"},"Components"),(0,r.kt)("h3",{id:"themeprovider"},(0,r.kt)("inlineCode",{parentName:"h3"},"ThemeProvider")),(0,r.kt)("p",null,"Please make sure that ",(0,r.kt)("inlineCode",{parentName:"p"},"ThemeProvider")," is defined at the root of your application (even if you are using the default theme) and ",(0,r.kt)("inlineCode",{parentName:"p"},"NO")," useStyles or useTheme is called before ",(0,r.kt)("inlineCode",{parentName:"p"},"<ThemeProvider>")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'- <ThemeProvider theme={myTheme} useDark={false}>\n+ <ThemeProvider theme={myTheme}>\n     <Button title="My Button" />\n   </ThemeProvider>\n')),(0,r.kt)("p",null,"Create custom theme using ",(0,r.kt)("inlineCode",{parentName:"p"},"createTheme")," helper"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"- const myTheme: FullTheme = {\n+ const myTheme = createTheme({\n-  colors: {\n+  lightColors:{\n     primary: '#f2f2f2',\n   },\n+  darkColors: {\n+   primary: '#121212',\n+  },\n+  mode: 'dark',\n};\n")),(0,r.kt)("p",null,"Since ",(0,r.kt)("inlineCode",{parentName:"p"},"useDark")," is deprecated, you can switch ",(0,r.kt)("inlineCode",{parentName:"p"},"dark")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"light")," themeColors using ",(0,r.kt)("inlineCode",{parentName:"p"},"updateTheme")," function which can be access from ",(0,r.kt)("inlineCode",{parentName:"p"},"useTheme")," hook."),(0,r.kt)("p",null,"Complete example of root of our application"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  lightColors: {\n    primary: '#f2f2f2',\n  },\n  darkColors: {\n    primary: '#121212',\n  },\n  mode: 'dark',\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n")),(0,r.kt)("p",null,"You can use props for components while defining themes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  Button: (buttonProps) => ({\n    titleStyle: {\n      color: buttonProps.type === 'solid' ? 'blue' : 'red',\n    },\n  }),\n});\n")),(0,r.kt)("p",null,"Thus when we use ",(0,r.kt)("inlineCode",{parentName:"p"},"type='solid'")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"Button")," component, it will use ",(0,r.kt)("inlineCode",{parentName:"p"},"titleStyle"),' will have "blue" color.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<Button type='solid'>\n")),(0,r.kt)("p",null,"Refer to ",(0,r.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/customization"},"Customization")," for more details."),(0,r.kt)("h3",{id:"tooltip"},(0,r.kt)("inlineCode",{parentName:"h3"},"Tooltip")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Tooltip")," is one of core component of RNE, Since v4 this component would be stateless and would use ",(0,r.kt)("inlineCode",{parentName:"p"},"visible"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onOpen")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"onClose")," Props for its working."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'  <Tooltip\n+   visible={open}\n+   onOpen={() => {\n+      setOpen(true);\n+   }}\n+   onClose={() => {\n+      setOpen(false);\n+   }}\n    popover="Hey All"\n  />\n')),(0,r.kt)("p",null,"You can still use Tooltip as stateful component by doing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const ControlledTooltip: React.FC<TooltipProps> = (props) => {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <Tooltip\n      visible={open}\n      onOpen={() => {\n        setOpen(true);\n      }}\n      onClose={() => {\n        setOpen(false);\n      }}\n      {...props}\n    />\n  );\n};\n")))}c.isMDXComponent=!0}}]);