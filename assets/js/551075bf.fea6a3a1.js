"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[885],{26218:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>u});var o=n(87462),s=n(63366),i=(n(67294),n(3905)),m=["components"],r={title:"Components",sidebar_position:3},p=void 0,a={unversionedId:"customization/components",id:"version-4.0.0-rc.2/customization/components",title:"Components",description:"Using the theme in your own components",source:"@site/versioned_docs/version-4.0.0-rc.2/customization/components.mdx",sourceDirName:"customization",slug:"/customization/components",permalink:"/docs/customization/components",draft:!1,editUrl:"https://github.com/react-native-elements/react-native-elements/edit/next/website/versioned_docs/version-4.0.0-rc.2/customization/components.mdx",tags:[],version:"4.0.0-rc.2",sidebarPosition:3,frontMatter:{title:"Components",sidebar_position:3},sidebar:"docs",previous:{title:"ThemeProvider",permalink:"/docs/customization/theming"},next:{title:"Common Pitfalls",permalink:"/docs/customization/pitfall"}},c={},u=[{value:"Using the theme in your own components",id:"using-the-theme-in-your-own-components",level:3}],l={toc:u};function h(e){var t=e.components,n=(0,s.Z)(e,m);return(0,i.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"using-the-theme-in-your-own-components"},"Using the theme in your own components"),(0,i.kt)("p",null,"You may want to make use of the theming utilities in your own components. For this you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"withTheme")," HOC exported from this library. It adds three props to the component it wraps - theme, updateTheme and replaceTheme."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title='MyComponent.tsx'",title:"'MyComponent.tsx'"},"import { Button, createTheme, withTheme } from '@rneui/themed';\n\ntype MyCustomComponentProps = {\n  title: string;\n  titleStyle: StyleProps<TextStyle>;\n};\n\nexport const MyCustomComponent = withTheme<MyCustomComponentProps>((props) => {\n  // Access theme from props\n  const { theme, updateTheme, replaceTheme } = props;\n  // ...\n});\n\ndeclare module '@rneui/themed' {\n  export interface FullTheme {\n    MyCustomComponent: Partial<MyCustomComponentProps>;\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title='App.tsx'",title:"'App.tsx'"},"import { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  MyCustomComponent: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      <MyCustomComponent title=\"My Component\" />\n    </ThemeProvider>\n  );\n};\n")))}h.isMDXComponent=!0}}]);