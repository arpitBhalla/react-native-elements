"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9039],{66342:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>m,default:()=>u,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var o=n(87462),i=n(63366),r=(n(67294),n(3905)),a=["components"],s={title:"ThemeProvider",sidebar_position:2},m=void 0,p={unversionedId:"customization/theming",id:"version-4.0.0-rc.2/customization/theming",title:"ThemeProvider",description:"The previous solution works great for only one component, but imagine having to",source:"@site/versioned_docs/version-4.0.0-rc.2/customization/theming.mdx",sourceDirName:"customization",slug:"/customization/theming",permalink:"/docs/customization/theming",draft:!1,editUrl:"https://github.com/react-native-elements/react-native-elements/edit/next/website/versioned_docs/version-4.0.0-rc.2/customization/theming.mdx",tags:[],version:"4.0.0-rc.2",sidebarPosition:2,frontMatter:{title:"ThemeProvider",sidebar_position:2},sidebar:"docs",previous:{title:"Color",permalink:"/docs/customization/color"},next:{title:"Components",permalink:"/docs/customization/components"}},l={},d=[{value:"Light and dark mode",id:"light-and-dark-mode",level:3}],h={toc:d};function u(e){var t=e.components,n=(0,i.Z)(e,a);return(0,r.kt)("wrapper",(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The previous solution works great for only one component, but imagine having to\ndo this for every component you want custom styles for. That could get a bit\ntedious to manage. Thankfully, there's a better way to do this. React Native\nElements ships with a 3 utilities for large-scale theming."),(0,r.kt)("p",null,"Firstly you'll want to set up your ",(0,r.kt)("inlineCode",{parentName:"p"},"ThemeProvider"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import { ThemeProvider, Button, createTheme } from \'@rneui/themed\';\n\nconst theme = createTheme({\n  Button: {\n    raised: true,\n  },\n});\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title="My Button" />\n      <Button title="My 2nd Button" />\n    </ThemeProvider>\n  );\n};\n')),(0,r.kt)("p",null,"The example above achieves the same goals as the first example \u2014 apply the same\nstyles to multiple instances of ",(0,r.kt)("inlineCode",{parentName:"p"},"Button")," in the app. However this example\napplies the ",(0,r.kt)("inlineCode",{parentName:"p"},"raised")," prop to every instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"Button")," inside the component\ntree under ",(0,r.kt)("inlineCode",{parentName:"p"},"ThemeProvider"),". Both of these buttons will have the ",(0,r.kt)("inlineCode",{parentName:"p"},"raised")," prop\nset to true."),(0,r.kt)("p",null,"This is extremely convenient and is made possible through\n",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html"},"React's Context API"),"."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"light-and-dark-mode"},"Light and dark mode"),(0,r.kt)("p",null,"React Native Elements also provides a preset dark mode palette to get you started with using dark mode in your app.\nUse the prop ",(0,r.kt)("inlineCode",{parentName:"p"},"mode")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"createTheme")," to set the default dark theme. You may want to set this by using a button,\nor by using the user's configured settings"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { ThemeProvider, Button, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  lightColors: {\n    primary: '#f2f2f2',\n  },\n  darkColors: {\n    primary: '#121212',\n  },\n  mode: 'dark',\n});\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n")),(0,r.kt)("p",null,"But how to switch modes?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useTheme } from '@rneui/themed';\n\nconst App = () => {\n  const { updateTheme } = useTheme();\n\n  const switchToDarkMode = () => {\n    updateTheme({\n      mode: 'dark',\n    });\n  };\n\n  const toggleTheme = () => {\n    updateTheme((theme) => ({\n      mode: theme.mode === 'light' ? 'dark' : 'light',\n    }));\n  };\n\n  return (\n    <>\n      <Button title=\"Toggle Theme\" onPress={toggleTheme} />\n      <Button title=\"Dark\" onPress={switchToDarkMode} />\n    </>\n  );\n};\n\nconst theme = createTheme({\n  Text: (prop) => ({\n    style: prop.h5 && { fontSize: 8 },\n  }),\n});\nconst theme = createTheme({\n  Text: {\n    h5Style: { fontSize: 8 },\n  },\n});\n")))}u.isMDXComponent=!0}}]);