"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6562],{63992:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>h,contentTitle:()=>m,default:()=>d,frontMatter:()=>s,metadata:()=>u,toc:()=>l});var n=o(87462),i=o(63366),r=(o(67294),o(3905)),a=["components"],s={title:"Theme Provider",sidebar_position:1},m=void 0,u={unversionedId:"customization/themprovider",id:"customization/themprovider",title:"Theme Provider",description:"The previous solution works great for only one component, but imagine having to",source:"@site/docs/customization/1.themprovider.mdx",sourceDirName:"customization",slug:"/customization/themprovider",permalink:"/docs/next/customization/themprovider",draft:!1,editUrl:"https://github.com/react-native-elements/react-native-elements/edit/next/website/docs/customization/1.themprovider.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Theme Provider",sidebar_position:1},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/next/customizing"},next:{title:"Theme Object",permalink:"/docs/next/customization/theme object"}},h={},l=[{value:"use-theme hook",id:"use-theme-hook",level:3},{value:"use-theme-mode hook",id:"use-theme-mode-hook",level:3}],p={toc:l};function d(e){var t=e.components,o=(0,i.Z)(e,a);return(0,r.kt)("wrapper",(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The previous solution works great for only one component, but imagine having to\ndo this for every component you want custom styles for. That could get a bit\ntedious to manage. Thankfully, there's a better way to do this. React Native\nElements ships with a 3 utilities for large-scale theming."),(0,r.kt)("p",null,"Firstly you'll want to set up your ",(0,r.kt)("inlineCode",{parentName:"p"},"ThemeProvider"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import { ThemeProvider, Button, createTheme } from \'@rneui/themed\';\n\nconst theme = createTheme({\n  Button: {\n    raised: true,\n  },\n});\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title="My Button" />\n      <Button title="My 2nd Button" />\n    </ThemeProvider>\n  );\n};\n')),(0,r.kt)("p",null,"The example above achieves the same goals as the first example \u2014 apply the same\nstyles to multiple instances of ",(0,r.kt)("inlineCode",{parentName:"p"},"Button")," in the app. However this example\napplies the ",(0,r.kt)("inlineCode",{parentName:"p"},"raised")," prop to every instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"Button")," inside the component\ntree under ",(0,r.kt)("inlineCode",{parentName:"p"},"ThemeProvider"),". Both of these buttons will have the ",(0,r.kt)("inlineCode",{parentName:"p"},"raised")," prop\nset to true."),(0,r.kt)("p",null,"This is extremely convenient and is made possible through\n",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html"},"React's Context API"),"."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"use-theme-hook"},"use-theme hook"),(0,r.kt)("p",null,"Hook returns ",(0,r.kt)("inlineCode",{parentName:"p"},"theme"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"updateTheme")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"replaceTheme")," from ThemeProvider context or default theme if you did not wrap application with ThemeProvider."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useTheme } from '@rneui/themed';\n\nfunction Demo() {\n  const { theme } = useTheme();\n  return <View style={{ background: theme.colors.primary }} />;\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"use-theme-mode-hook"},"use-theme-mode hook"),(0,r.kt)("p",null,"You can get current theme mode (light or dark) and update it using setMode function from useThemeMode hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useThemeMode } from '@rneui/themed';\n\nfunction Demo() {\n  const { mode, setMode } = useThemeMode();\n\n  return <Button onPress={() => setMode('dark')} title=${mode} />;\n}\n")))}d.isMDXComponent=!0}}]);