"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1434],{63468:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>s,metadata:()=>m,toc:()=>c});var o=n(87462),r=n(63366),a=(n(67294),n(3905)),i=["components"],s={sidebar_label:"With Typescript",title:"Typescript",sidebar_position:3},p=void 0,m={unversionedId:"customization/typescript",id:"customization/typescript",title:"Typescript",description:"TypeScript definitions for your theme can be extended by using TypeScript's declaration merging feature. First you need to create a declaration file called themed.d.ts and then declare the module @rneui/themed and 're-export' the types that you want to extend. i.e. below we add a custom p1Style to the Text theme object and we add a bunch of colors to the colors object.",source:"@site/docs/customization/3.typescript.mdx",sourceDirName:"customization",slug:"/customization/typescript",permalink:"/docs/next/customization/typescript",draft:!1,editUrl:"https://github.com/react-native-elements/react-native-elements/edit/next/website/docs/customization/3.typescript.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"With Typescript",title:"Typescript",sidebar_position:3},sidebar:"docs",previous:{title:"Theme Object",permalink:"/docs/next/customization/theme object"},next:{title:"Common Pitfalls",permalink:"/docs/next/customization/pitfall"}},l={},c=[{value:"Adding custom colors",id:"adding-custom-colors",level:3},{value:"Adding custom &#39;other&#39; properties",id:"adding-custom-other-properties",level:3},{value:"Extending RNE default components",id:"extending-rne-default-components",level:3},{value:"Using the theme in your own components",id:"using-the-theme-in-your-own-components",level:3},{value:"Theming with no RNE components",id:"theming-with-no-rne-components",level:3}],d={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"TypeScript definitions for your theme can be extended by using TypeScript's ",(0,a.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/declaration-merging.html"},"declaration merging")," feature. First you need to create a declaration file called ",(0,a.kt)("inlineCode",{parentName:"p"},"themed.d.ts")," and then declare the module ",(0,a.kt)("inlineCode",{parentName:"p"},"@rneui/themed")," and 're-export' the types that you want to extend. i.e. below we add a custom ",(0,a.kt)("inlineCode",{parentName:"p"},"p1Style")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Text")," theme object and we add a bunch of colors to the ",(0,a.kt)("inlineCode",{parentName:"p"},"colors")," object."),(0,a.kt)("h3",{id:"adding-custom-colors"},"Adding custom colors"),(0,a.kt)("p",null,"TypeScript will only autocomplete RNE's default colors when accessing the theme. To add your custom colors to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Colors")," type, you can use TypeScript module declaration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface Colors {\n    primaryLight: string;\n    primaryDark: string;\n    secondaryLight: string;\n    secondaryDark: string;\n  }\n}\n")),(0,a.kt)("p",null,"Then when you create your ",(0,a.kt)("inlineCode",{parentName:"p"},"ThemeProvider")," instance,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const theme = createTheme({\n  lightColors: {\n    ...yourCustomColorShape\n  },\n  darkColors: {\n    ...yourCustomColorShape\n  },\n  mode: // your light or dark mode value\n})\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const App = () => {\n  const { theme } = useTheme();\n  return <Text style={{ color: theme.colors.primaryLight }} />;\n};\n")),(0,a.kt)("h3",{id:"adding-custom-other-properties"},"Adding custom 'other' properties"),(0,a.kt)("p",null,"Similar to how you can extend/set custom colors, you can add your own properties to the ",(0,a.kt)("inlineCode",{parentName:"p"},"theme")," type using TypeScript module declaration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface Theme {\n    myCustomProperty: string;\n    myCustomFunction: () => void;\n  }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const App = () => {\n  const { theme } = useTheme();\n  return <Text>{theme.myCustomProperty}</Text>;\n};\n")),(0,a.kt)("h3",{id:"extending-rne-default-components"},"Extending RNE default components"),(0,a.kt)("p",null,"If you need to extend some props of RNE's default components, you can use TypeScript module declaration, Also remember to extend ",(0,a.kt)("inlineCode",{parentName:"p"},"ComponentTheme")," too."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import '@rneui/themed';\n\ndeclare module '@rneui/themed' {\n  export interface TextProps {\n    bold: boolean;\n  }\n\n  export interface ComponentTheme {\n    Text: Partial<TextProps>;\n  }\n}\n")),(0,a.kt)("p",null,"For eg. You can use the following code to extend the ",(0,a.kt)("inlineCode",{parentName:"p"},"Text")," component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const myTheme = createTheme({\n  Text: (props) => ({\n    style: {\n      fontWeight: props.bold ? 'bold' : 'normal',\n    },\n  }),\n});\n")),(0,a.kt)("p",null,"and use it like this"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const App = () => {\n  const { theme } = useTheme();\n  return (\n    <View>\n      <Text>Normal Text</Text>\n      <Text bold>Bold Text</Text>\n    </View>\n  );\n};\n")),(0,a.kt)("h3",{id:"using-the-theme-in-your-own-components"},"Using the theme in your own components"),(0,a.kt)("p",null,"You may want to make use of the theming utilities in your own components. For this you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"withTheme")," HOC exported from this library. It adds three props to the component it wraps - theme, updateTheme and replaceTheme."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { withTheme } from '@rneui/themed';\n\ntype MyCustomComponentProps = {\n  title: string;\n  titleStyle: StyleProps<TextStyle>;\n};\n\nexport const MyCustomComponent = withTheme<MyCustomComponentProps>((props) => {\n  // Access theme from props\n  const { theme, updateTheme, replaceTheme } = props;\n  // ...\n});\n\ndeclare module '@rneui/themed' {\n  export interface ComponentTheme {\n    MyCustomComponent: Partial<MyCustomComponentProps>;\n  }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { ThemeProvider, createTheme } from '@rneui/themed';\n\nconst myTheme = createTheme({\n  MyCustomComponent: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={myTheme}>\n      <MyCustomComponent title=\"My Component\" />\n    </ThemeProvider>\n  );\n};\n")),(0,a.kt)("h3",{id:"theming-with-no-rne-components"},"Theming with no RNE components"),(0,a.kt)("p",null,"You can install ",(0,a.kt)("inlineCode",{parentName:"p"},"@rneui/theming"),", refer it's ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@rneui/theming"},"documentation")))}u.isMDXComponent=!0}}]);